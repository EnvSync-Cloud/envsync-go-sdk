// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type CheckIfSlugExistsRequest struct {
	Slug string `json:"-" url:"slug"`
}

type CheckSlugResponse struct {
	Exists bool `json:"exists" url:"exists"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CheckSlugResponse) GetExists() bool {
	if c == nil {
		return false
	}
	return c.Exists
}

func (c *CheckSlugResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CheckSlugResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CheckSlugResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CheckSlugResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CheckSlugResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type OrgResponse struct {
	Id        string                 `json:"id" url:"id"`
	Name      string                 `json:"name" url:"name"`
	LogoUrl   *string                `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Slug      string                 `json:"slug" url:"slug"`
	Size      *string                `json:"size,omitempty" url:"size,omitempty"`
	Website   *string                `json:"website,omitempty" url:"website,omitempty"`
	Metadata  map[string]interface{} `json:"metadata" url:"metadata"`
	CreatedAt string                 `json:"created_at" url:"created_at"`
	UpdatedAt string                 `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OrgResponse) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OrgResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *OrgResponse) GetLogoUrl() *string {
	if o == nil {
		return nil
	}
	return o.LogoUrl
}

func (o *OrgResponse) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *OrgResponse) GetSize() *string {
	if o == nil {
		return nil
	}
	return o.Size
}

func (o *OrgResponse) GetWebsite() *string {
	if o == nil {
		return nil
	}
	return o.Website
}

func (o *OrgResponse) GetMetadata() map[string]interface{} {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *OrgResponse) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *OrgResponse) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *OrgResponse) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OrgResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler OrgResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OrgResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OrgResponse) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type UpdateOrgRequest struct {
	LogoUrl *string `json:"logo_url,omitempty" url:"-"`
	Website *string `json:"website,omitempty" url:"-"`
	Name    *string `json:"name,omitempty" url:"-"`
	Slug    *string `json:"slug,omitempty" url:"-"`
}
