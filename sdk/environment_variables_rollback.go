// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/internal"
	time "time"
)

type RollbackToPitRequest struct {
	AppId           string  `json:"app_id" url:"-"`
	EnvTypeId       string  `json:"env_type_id" url:"-"`
	PitId           string  `json:"pit_id" url:"-"`
	RollbackMessage *string `json:"rollback_message,omitempty" url:"-"`
}

type RollbackToTimestampRequest struct {
	AppId           string    `json:"app_id" url:"-"`
	EnvTypeId       string    `json:"env_type_id" url:"-"`
	Timestamp       time.Time `json:"timestamp" url:"-"`
	RollbackMessage *string   `json:"rollback_message,omitempty" url:"-"`
}

func (r *RollbackToTimestampRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RollbackToTimestampRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*r = RollbackToTimestampRequest(body)
	return nil
}

func (r *RollbackToTimestampRequest) MarshalJSON() ([]byte, error) {
	type embed RollbackToTimestampRequest
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*r),
		Timestamp: internal.NewDateTime(r.Timestamp),
	}
	return json.Marshal(marshaler)
}

type VariableRollbackToPitRequest struct {
	AppId           string  `json:"app_id" url:"-"`
	EnvTypeId       string  `json:"env_type_id" url:"-"`
	PitId           string  `json:"pit_id" url:"-"`
	RollbackMessage *string `json:"rollback_message,omitempty" url:"-"`
}

type VariableRollbackToTimestampRequest struct {
	AppId           string    `json:"app_id" url:"-"`
	EnvTypeId       string    `json:"env_type_id" url:"-"`
	Timestamp       time.Time `json:"timestamp" url:"-"`
	RollbackMessage *string   `json:"rollback_message,omitempty" url:"-"`
}

func (v *VariableRollbackToTimestampRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler VariableRollbackToTimestampRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*v = VariableRollbackToTimestampRequest(body)
	return nil
}

func (v *VariableRollbackToTimestampRequest) MarshalJSON() ([]byte, error) {
	type embed VariableRollbackToTimestampRequest
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*v),
		Timestamp: internal.NewDateTime(v.Timestamp),
	}
	return json.Marshal(marshaler)
}

type RollbackResponse struct {
	Message             string                            `json:"message" url:"message"`
	OperationsPerformed int                               `json:"operations_performed" url:"operations_performed"`
	Operations          []*RollbackResponseOperationsItem `json:"operations" url:"operations"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RollbackResponse) GetMessage() string {
	if r == nil {
		return ""
	}
	return r.Message
}

func (r *RollbackResponse) GetOperationsPerformed() int {
	if r == nil {
		return 0
	}
	return r.OperationsPerformed
}

func (r *RollbackResponse) GetOperations() []*RollbackResponseOperationsItem {
	if r == nil {
		return nil
	}
	return r.Operations
}

func (r *RollbackResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RollbackResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RollbackResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RollbackResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RollbackResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RollbackResponseOperationsItem struct {
	Key       string                                  `json:"key" url:"key"`
	Value     string                                  `json:"value" url:"value"`
	Operation RollbackResponseOperationsItemOperation `json:"operation" url:"operation"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RollbackResponseOperationsItem) GetKey() string {
	if r == nil {
		return ""
	}
	return r.Key
}

func (r *RollbackResponseOperationsItem) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

func (r *RollbackResponseOperationsItem) GetOperation() RollbackResponseOperationsItemOperation {
	if r == nil {
		return ""
	}
	return r.Operation
}

func (r *RollbackResponseOperationsItem) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RollbackResponseOperationsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler RollbackResponseOperationsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RollbackResponseOperationsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RollbackResponseOperationsItem) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RollbackResponseOperationsItemOperation string

const (
	RollbackResponseOperationsItemOperationCreate RollbackResponseOperationsItemOperation = "CREATE"
	RollbackResponseOperationsItemOperationUpdate RollbackResponseOperationsItemOperation = "UPDATE"
	RollbackResponseOperationsItemOperationDelete RollbackResponseOperationsItemOperation = "DELETE"
)

func NewRollbackResponseOperationsItemOperationFromString(s string) (RollbackResponseOperationsItemOperation, error) {
	switch s {
	case "CREATE":
		return RollbackResponseOperationsItemOperationCreate, nil
	case "UPDATE":
		return RollbackResponseOperationsItemOperationUpdate, nil
	case "DELETE":
		return RollbackResponseOperationsItemOperationDelete, nil
	}
	var t RollbackResponseOperationsItemOperation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RollbackResponseOperationsItemOperation) Ptr() *RollbackResponseOperationsItemOperation {
	return &r
}

type VariableRollbackResponse struct {
	Message         string                            `json:"message" url:"message"`
	Key             string                            `json:"key" url:"key"`
	Operation       VariableRollbackResponseOperation `json:"operation" url:"operation"`
	PreviousValue   *string                           `json:"previous_value,omitempty" url:"previous_value,omitempty"`
	TargetValue     *string                           `json:"target_value,omitempty" url:"target_value,omitempty"`
	PitId           *string                           `json:"pit_id,omitempty" url:"pit_id,omitempty"`
	TargetTimestamp *string                           `json:"target_timestamp,omitempty" url:"target_timestamp,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VariableRollbackResponse) GetMessage() string {
	if v == nil {
		return ""
	}
	return v.Message
}

func (v *VariableRollbackResponse) GetKey() string {
	if v == nil {
		return ""
	}
	return v.Key
}

func (v *VariableRollbackResponse) GetOperation() VariableRollbackResponseOperation {
	if v == nil {
		return ""
	}
	return v.Operation
}

func (v *VariableRollbackResponse) GetPreviousValue() *string {
	if v == nil {
		return nil
	}
	return v.PreviousValue
}

func (v *VariableRollbackResponse) GetTargetValue() *string {
	if v == nil {
		return nil
	}
	return v.TargetValue
}

func (v *VariableRollbackResponse) GetPitId() *string {
	if v == nil {
		return nil
	}
	return v.PitId
}

func (v *VariableRollbackResponse) GetTargetTimestamp() *string {
	if v == nil {
		return nil
	}
	return v.TargetTimestamp
}

func (v *VariableRollbackResponse) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VariableRollbackResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler VariableRollbackResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VariableRollbackResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VariableRollbackResponse) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VariableRollbackResponseOperation string

const (
	VariableRollbackResponseOperationCreate VariableRollbackResponseOperation = "CREATE"
	VariableRollbackResponseOperationUpdate VariableRollbackResponseOperation = "UPDATE"
	VariableRollbackResponseOperationDelete VariableRollbackResponseOperation = "DELETE"
)

func NewVariableRollbackResponseOperationFromString(s string) (VariableRollbackResponseOperation, error) {
	switch s {
	case "CREATE":
		return VariableRollbackResponseOperationCreate, nil
	case "UPDATE":
		return VariableRollbackResponseOperationUpdate, nil
	case "DELETE":
		return VariableRollbackResponseOperationDelete, nil
	}
	var t VariableRollbackResponseOperation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VariableRollbackResponseOperation) Ptr() *VariableRollbackResponseOperation {
	return &v
}
