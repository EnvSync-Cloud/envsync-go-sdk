// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/internal"
)

type CreateApiKeyRequest struct {
	Name        string  `json:"name" url:"-"`
	Description *string `json:"description,omitempty" url:"-"`
}

type ApiKeyResponse struct {
	Id          string  `json:"id" url:"id"`
	UserId      string  `json:"user_id" url:"user_id"`
	OrgId       string  `json:"org_id" url:"org_id"`
	Description string  `json:"description" url:"description"`
	IsActive    bool    `json:"is_active" url:"is_active"`
	Key         string  `json:"key" url:"key"`
	CreatedAt   string  `json:"created_at" url:"created_at"`
	UpdatedAt   string  `json:"updated_at" url:"updated_at"`
	LastUsedAt  *string `json:"last_used_at,omitempty" url:"last_used_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *ApiKeyResponse) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *ApiKeyResponse) GetUserId() string {
	if a == nil {
		return ""
	}
	return a.UserId
}

func (a *ApiKeyResponse) GetOrgId() string {
	if a == nil {
		return ""
	}
	return a.OrgId
}

func (a *ApiKeyResponse) GetDescription() string {
	if a == nil {
		return ""
	}
	return a.Description
}

func (a *ApiKeyResponse) GetIsActive() bool {
	if a == nil {
		return false
	}
	return a.IsActive
}

func (a *ApiKeyResponse) GetKey() string {
	if a == nil {
		return ""
	}
	return a.Key
}

func (a *ApiKeyResponse) GetCreatedAt() string {
	if a == nil {
		return ""
	}
	return a.CreatedAt
}

func (a *ApiKeyResponse) GetUpdatedAt() string {
	if a == nil {
		return ""
	}
	return a.UpdatedAt
}

func (a *ApiKeyResponse) GetLastUsedAt() *string {
	if a == nil {
		return nil
	}
	return a.LastUsedAt
}

func (a *ApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *ApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiKeyResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiKeysResponse = []*ApiKeyResponse

type RegenerateApiKeyResponse struct {
	NewKey string `json:"newKey" url:"newKey"`
	Id     string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RegenerateApiKeyResponse) GetNewKey() string {
	if r == nil {
		return ""
	}
	return r.NewKey
}

func (r *RegenerateApiKeyResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RegenerateApiKeyResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RegenerateApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RegenerateApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RegenerateApiKeyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RegenerateApiKeyResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateApiKeyRequest struct {
	Description *string `json:"description,omitempty" url:"-"`
	IsActive    *bool   `json:"is_active,omitempty" url:"-"`
	LastUsedAt  *string `json:"last_used_at,omitempty" url:"-"`
}
