// Code generated by Fern. DO NOT EDIT.

package client

import (
	access "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/access"
	apikeys "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/apikeys"
	applications "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/applications"
	auditlogs "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/auditlogs"
	authentication "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/authentication"
	core "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/core"
	environmenttypes "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/environmenttypes"
	environmentvariables "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/environmentvariables"
	environmentvariablespointintime "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/environmentvariablespointintime"
	environmentvariablesrollback "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/environmentvariablesrollback"
	fileupload "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/fileupload"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/internal"
	onboarding "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/onboarding"
	option "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/option"
	organizations "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/organizations"
	roles "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/roles"
	secrets "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/secrets"
	secretspointintime "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/secretspointintime"
	secretsrollback "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/secretsrollback"
	users "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/users"
	webhooks "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/webhooks"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header

	Access                          *access.Client
	Applications                    *applications.Client
	ApiKeys                         *apikeys.Client
	AuditLogs                       *auditlogs.Client
	Authentication                  *authentication.Client
	EnvironmentTypes                *environmenttypes.Client
	EnvironmentVariables            *environmentvariables.Client
	EnvironmentVariablesPointInTime *environmentvariablespointintime.Client
	EnvironmentVariablesRollback    *environmentvariablesrollback.Client
	Roles                           *roles.Client
	Onboarding                      *onboarding.Client
	Organizations                   *organizations.Client
	Secrets                         *secrets.Client
	SecretsPointInTime              *secretspointintime.Client
	SecretsRollback                 *secretsrollback.Client
	FileUpload                      *fileupload.Client
	Users                           *users.Client
	Webhooks                        *webhooks.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header:                          options.ToHeader(),
		Access:                          access.NewClient(opts...),
		Applications:                    applications.NewClient(opts...),
		ApiKeys:                         apikeys.NewClient(opts...),
		AuditLogs:                       auditlogs.NewClient(opts...),
		Authentication:                  authentication.NewClient(opts...),
		EnvironmentTypes:                environmenttypes.NewClient(opts...),
		EnvironmentVariables:            environmentvariables.NewClient(opts...),
		EnvironmentVariablesPointInTime: environmentvariablespointintime.NewClient(opts...),
		EnvironmentVariablesRollback:    environmentvariablesrollback.NewClient(opts...),
		Roles:                           roles.NewClient(opts...),
		Onboarding:                      onboarding.NewClient(opts...),
		Organizations:                   organizations.NewClient(opts...),
		Secrets:                         secrets.NewClient(opts...),
		SecretsPointInTime:              secretspointintime.NewClient(opts...),
		SecretsRollback:                 secretsrollback.NewClient(opts...),
		FileUpload:                      fileupload.NewClient(opts...),
		Users:                           users.NewClient(opts...),
		Webhooks:                        webhooks.NewClient(opts...),
	}
}
