// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/internal"
)

type CreateWebhookRequest struct {
	Name        string                          `json:"name" url:"-"`
	Url         string                          `json:"url" url:"-"`
	EventTypes  []string                        `json:"event_types,omitempty" url:"-"`
	WebhookType CreateWebhookRequestWebhookType `json:"webhook_type" url:"-"`
	LinkedTo    *CreateWebhookRequestLinkedTo   `json:"linked_to,omitempty" url:"-"`
	AppId       *string                         `json:"app_id,omitempty" url:"-"`
}

type WebhookResponse struct {
	Id              string                     `json:"id" url:"id"`
	Name            string                     `json:"name" url:"name"`
	OrgId           string                     `json:"org_id" url:"org_id"`
	UserId          string                     `json:"user_id" url:"user_id"`
	Url             string                     `json:"url" url:"url"`
	EventTypes      []string                   `json:"event_types" url:"event_types"`
	IsActive        bool                       `json:"is_active" url:"is_active"`
	WebhookType     WebhookResponseWebhookType `json:"webhook_type" url:"webhook_type"`
	AppId           *string                    `json:"app_id,omitempty" url:"app_id,omitempty"`
	LinkedTo        WebhookResponseLinkedTo    `json:"linked_to" url:"linked_to"`
	CreatedAt       string                     `json:"created_at" url:"created_at"`
	UpdatedAt       string                     `json:"updated_at" url:"updated_at"`
	LastTriggeredAt *string                    `json:"last_triggered_at,omitempty" url:"last_triggered_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WebhookResponse) GetId() string {
	if w == nil {
		return ""
	}
	return w.Id
}

func (w *WebhookResponse) GetName() string {
	if w == nil {
		return ""
	}
	return w.Name
}

func (w *WebhookResponse) GetOrgId() string {
	if w == nil {
		return ""
	}
	return w.OrgId
}

func (w *WebhookResponse) GetUserId() string {
	if w == nil {
		return ""
	}
	return w.UserId
}

func (w *WebhookResponse) GetUrl() string {
	if w == nil {
		return ""
	}
	return w.Url
}

func (w *WebhookResponse) GetEventTypes() []string {
	if w == nil {
		return nil
	}
	return w.EventTypes
}

func (w *WebhookResponse) GetIsActive() bool {
	if w == nil {
		return false
	}
	return w.IsActive
}

func (w *WebhookResponse) GetWebhookType() WebhookResponseWebhookType {
	if w == nil {
		return ""
	}
	return w.WebhookType
}

func (w *WebhookResponse) GetAppId() *string {
	if w == nil {
		return nil
	}
	return w.AppId
}

func (w *WebhookResponse) GetLinkedTo() WebhookResponseLinkedTo {
	if w == nil {
		return ""
	}
	return w.LinkedTo
}

func (w *WebhookResponse) GetCreatedAt() string {
	if w == nil {
		return ""
	}
	return w.CreatedAt
}

func (w *WebhookResponse) GetUpdatedAt() string {
	if w == nil {
		return ""
	}
	return w.UpdatedAt
}

func (w *WebhookResponse) GetLastTriggeredAt() *string {
	if w == nil {
		return nil
	}
	return w.LastTriggeredAt
}

func (w *WebhookResponse) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WebhookResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WebhookResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WebhookResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WebhookResponse) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WebhookResponseLinkedTo string

const (
	WebhookResponseLinkedToOrg WebhookResponseLinkedTo = "org"
	WebhookResponseLinkedToApp WebhookResponseLinkedTo = "app"
)

func NewWebhookResponseLinkedToFromString(s string) (WebhookResponseLinkedTo, error) {
	switch s {
	case "org":
		return WebhookResponseLinkedToOrg, nil
	case "app":
		return WebhookResponseLinkedToApp, nil
	}
	var t WebhookResponseLinkedTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookResponseLinkedTo) Ptr() *WebhookResponseLinkedTo {
	return &w
}

type WebhookResponseWebhookType string

const (
	WebhookResponseWebhookTypeDiscord WebhookResponseWebhookType = "DISCORD"
	WebhookResponseWebhookTypeSlack   WebhookResponseWebhookType = "SLACK"
	WebhookResponseWebhookTypeCustom  WebhookResponseWebhookType = "CUSTOM"
)

func NewWebhookResponseWebhookTypeFromString(s string) (WebhookResponseWebhookType, error) {
	switch s {
	case "DISCORD":
		return WebhookResponseWebhookTypeDiscord, nil
	case "SLACK":
		return WebhookResponseWebhookTypeSlack, nil
	case "CUSTOM":
		return WebhookResponseWebhookTypeCustom, nil
	}
	var t WebhookResponseWebhookType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WebhookResponseWebhookType) Ptr() *WebhookResponseWebhookType {
	return &w
}

type WebhooksResponse = []*WebhookResponse

type CreateWebhookRequestLinkedTo string

const (
	CreateWebhookRequestLinkedToOrg CreateWebhookRequestLinkedTo = "org"
	CreateWebhookRequestLinkedToApp CreateWebhookRequestLinkedTo = "app"
)

func NewCreateWebhookRequestLinkedToFromString(s string) (CreateWebhookRequestLinkedTo, error) {
	switch s {
	case "org":
		return CreateWebhookRequestLinkedToOrg, nil
	case "app":
		return CreateWebhookRequestLinkedToApp, nil
	}
	var t CreateWebhookRequestLinkedTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateWebhookRequestLinkedTo) Ptr() *CreateWebhookRequestLinkedTo {
	return &c
}

type CreateWebhookRequestWebhookType string

const (
	CreateWebhookRequestWebhookTypeDiscord CreateWebhookRequestWebhookType = "DISCORD"
	CreateWebhookRequestWebhookTypeSlack   CreateWebhookRequestWebhookType = "SLACK"
	CreateWebhookRequestWebhookTypeCustom  CreateWebhookRequestWebhookType = "CUSTOM"
)

func NewCreateWebhookRequestWebhookTypeFromString(s string) (CreateWebhookRequestWebhookType, error) {
	switch s {
	case "DISCORD":
		return CreateWebhookRequestWebhookTypeDiscord, nil
	case "SLACK":
		return CreateWebhookRequestWebhookTypeSlack, nil
	case "CUSTOM":
		return CreateWebhookRequestWebhookTypeCustom, nil
	}
	var t CreateWebhookRequestWebhookType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CreateWebhookRequestWebhookType) Ptr() *CreateWebhookRequestWebhookType {
	return &c
}

type UpdateWebhookRequestLinkedTo string

const (
	UpdateWebhookRequestLinkedToOrg UpdateWebhookRequestLinkedTo = "org"
	UpdateWebhookRequestLinkedToApp UpdateWebhookRequestLinkedTo = "app"
)

func NewUpdateWebhookRequestLinkedToFromString(s string) (UpdateWebhookRequestLinkedTo, error) {
	switch s {
	case "org":
		return UpdateWebhookRequestLinkedToOrg, nil
	case "app":
		return UpdateWebhookRequestLinkedToApp, nil
	}
	var t UpdateWebhookRequestLinkedTo
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateWebhookRequestLinkedTo) Ptr() *UpdateWebhookRequestLinkedTo {
	return &u
}

type UpdateWebhookRequestWebhookType string

const (
	UpdateWebhookRequestWebhookTypeDiscord UpdateWebhookRequestWebhookType = "DISCORD"
	UpdateWebhookRequestWebhookTypeSlack   UpdateWebhookRequestWebhookType = "SLACK"
	UpdateWebhookRequestWebhookTypeCustom  UpdateWebhookRequestWebhookType = "CUSTOM"
)

func NewUpdateWebhookRequestWebhookTypeFromString(s string) (UpdateWebhookRequestWebhookType, error) {
	switch s {
	case "DISCORD":
		return UpdateWebhookRequestWebhookTypeDiscord, nil
	case "SLACK":
		return UpdateWebhookRequestWebhookTypeSlack, nil
	case "CUSTOM":
		return UpdateWebhookRequestWebhookTypeCustom, nil
	}
	var t UpdateWebhookRequestWebhookType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpdateWebhookRequestWebhookType) Ptr() *UpdateWebhookRequestWebhookType {
	return &u
}

type UpdateWebhookRequest struct {
	Name        *string                          `json:"name,omitempty" url:"-"`
	Url         *string                          `json:"url,omitempty" url:"-"`
	EventTypes  []string                         `json:"event_types,omitempty" url:"-"`
	IsActive    *bool                            `json:"is_active,omitempty" url:"-"`
	WebhookType *UpdateWebhookRequestWebhookType `json:"webhook_type,omitempty" url:"-"`
	AppId       *string                          `json:"app_id,omitempty" url:"-"`
	LinkedTo    *UpdateWebhookRequestLinkedTo    `json:"linked_to,omitempty" url:"-"`
}
