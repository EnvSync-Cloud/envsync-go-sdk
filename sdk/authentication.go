// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/sdk/internal"
)

type WhoAmIResponse struct {
	User *WhoAmIResponseUser `json:"user" url:"user"`
	Org  *WhoAmIResponseOrg  `json:"org" url:"org"`
	Role *RoleResponse       `json:"role" url:"role"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WhoAmIResponse) GetUser() *WhoAmIResponseUser {
	if w == nil {
		return nil
	}
	return w.User
}

func (w *WhoAmIResponse) GetOrg() *WhoAmIResponseOrg {
	if w == nil {
		return nil
	}
	return w.Org
}

func (w *WhoAmIResponse) GetRole() *RoleResponse {
	if w == nil {
		return nil
	}
	return w.Role
}

func (w *WhoAmIResponse) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WhoAmIResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler WhoAmIResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WhoAmIResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WhoAmIResponse) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WhoAmIResponseOrg struct {
	Id        string                 `json:"id" url:"id"`
	Name      string                 `json:"name" url:"name"`
	LogoUrl   *string                `json:"logo_url,omitempty" url:"logo_url,omitempty"`
	Slug      string                 `json:"slug" url:"slug"`
	Size      *string                `json:"size,omitempty" url:"size,omitempty"`
	Website   *string                `json:"website,omitempty" url:"website,omitempty"`
	Metadata  map[string]interface{} `json:"metadata" url:"metadata"`
	CreatedAt string                 `json:"created_at" url:"created_at"`
	UpdatedAt string                 `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WhoAmIResponseOrg) GetId() string {
	if w == nil {
		return ""
	}
	return w.Id
}

func (w *WhoAmIResponseOrg) GetName() string {
	if w == nil {
		return ""
	}
	return w.Name
}

func (w *WhoAmIResponseOrg) GetLogoUrl() *string {
	if w == nil {
		return nil
	}
	return w.LogoUrl
}

func (w *WhoAmIResponseOrg) GetSlug() string {
	if w == nil {
		return ""
	}
	return w.Slug
}

func (w *WhoAmIResponseOrg) GetSize() *string {
	if w == nil {
		return nil
	}
	return w.Size
}

func (w *WhoAmIResponseOrg) GetWebsite() *string {
	if w == nil {
		return nil
	}
	return w.Website
}

func (w *WhoAmIResponseOrg) GetMetadata() map[string]interface{} {
	if w == nil {
		return nil
	}
	return w.Metadata
}

func (w *WhoAmIResponseOrg) GetCreatedAt() string {
	if w == nil {
		return ""
	}
	return w.CreatedAt
}

func (w *WhoAmIResponseOrg) GetUpdatedAt() string {
	if w == nil {
		return ""
	}
	return w.UpdatedAt
}

func (w *WhoAmIResponseOrg) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WhoAmIResponseOrg) UnmarshalJSON(data []byte) error {
	type unmarshaler WhoAmIResponseOrg
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WhoAmIResponseOrg(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WhoAmIResponseOrg) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WhoAmIResponseUser struct {
	Id                string  `json:"id" url:"id"`
	Email             string  `json:"email" url:"email"`
	FullName          string  `json:"full_name" url:"full_name"`
	OrgId             string  `json:"org_id" url:"org_id"`
	RoleId            string  `json:"role_id" url:"role_id"`
	ProfilePictureUrl *string `json:"profile_picture_url,omitempty" url:"profile_picture_url,omitempty"`
	IsActive          bool    `json:"is_active" url:"is_active"`
	CreatedAt         string  `json:"created_at" url:"created_at"`
	UpdatedAt         string  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *WhoAmIResponseUser) GetId() string {
	if w == nil {
		return ""
	}
	return w.Id
}

func (w *WhoAmIResponseUser) GetEmail() string {
	if w == nil {
		return ""
	}
	return w.Email
}

func (w *WhoAmIResponseUser) GetFullName() string {
	if w == nil {
		return ""
	}
	return w.FullName
}

func (w *WhoAmIResponseUser) GetOrgId() string {
	if w == nil {
		return ""
	}
	return w.OrgId
}

func (w *WhoAmIResponseUser) GetRoleId() string {
	if w == nil {
		return ""
	}
	return w.RoleId
}

func (w *WhoAmIResponseUser) GetProfilePictureUrl() *string {
	if w == nil {
		return nil
	}
	return w.ProfilePictureUrl
}

func (w *WhoAmIResponseUser) GetIsActive() bool {
	if w == nil {
		return false
	}
	return w.IsActive
}

func (w *WhoAmIResponseUser) GetCreatedAt() string {
	if w == nil {
		return ""
	}
	return w.CreatedAt
}

func (w *WhoAmIResponseUser) GetUpdatedAt() string {
	if w == nil {
		return ""
	}
	return w.UpdatedAt
}

func (w *WhoAmIResponseUser) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WhoAmIResponseUser) UnmarshalJSON(data []byte) error {
	type unmarshaler WhoAmIResponseUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WhoAmIResponseUser(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *WhoAmIResponseUser) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}
