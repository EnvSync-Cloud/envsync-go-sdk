// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type CreateAppRequest struct {
	Name          string                 `json:"name" url:"-"`
	Description   string                 `json:"description" url:"-"`
	EnableSecrets *bool                  `json:"enable_secrets,omitempty" url:"-"`
	PublicKey     *string                `json:"public_key,omitempty" url:"-"`
	Metadata      map[string]interface{} `json:"metadata,omitempty" url:"-"`
}

type CreateAppResponse struct {
	Message string `json:"message" url:"message"`
	Id      string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateAppResponse) GetMessage() string {
	if c == nil {
		return ""
	}
	return c.Message
}

func (c *CreateAppResponse) GetId() string {
	if c == nil {
		return ""
	}
	return c.Id
}

func (c *CreateAppResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateAppResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateAppResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateAppResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateAppResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteAppResponse struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteAppResponse) GetMessage() string {
	if d == nil {
		return ""
	}
	return d.Message
}

func (d *DeleteAppResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteAppResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteAppResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteAppResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteAppResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type GetAppResponse struct {
	Id              string                        `json:"id" url:"id"`
	Name            string                        `json:"name" url:"name"`
	Description     string                        `json:"description" url:"description"`
	Metadata        map[string]interface{}        `json:"metadata" url:"metadata"`
	EnableSecrets   bool                          `json:"enable_secrets" url:"enable_secrets"`
	IsManagedSecret bool                          `json:"is_managed_secret" url:"is_managed_secret"`
	PublicKey       *string                       `json:"public_key,omitempty" url:"public_key,omitempty"`
	OrgId           string                        `json:"org_id" url:"org_id"`
	EnvCount        float64                       `json:"envCount" url:"envCount"`
	EnvTypes        []*GetAppResponseEnvTypesItem `json:"env_types" url:"env_types"`
	CreatedAt       string                        `json:"created_at" url:"created_at"`
	UpdatedAt       string                        `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetAppResponse) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetAppResponse) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetAppResponse) GetDescription() string {
	if g == nil {
		return ""
	}
	return g.Description
}

func (g *GetAppResponse) GetMetadata() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetAppResponse) GetEnableSecrets() bool {
	if g == nil {
		return false
	}
	return g.EnableSecrets
}

func (g *GetAppResponse) GetIsManagedSecret() bool {
	if g == nil {
		return false
	}
	return g.IsManagedSecret
}

func (g *GetAppResponse) GetPublicKey() *string {
	if g == nil {
		return nil
	}
	return g.PublicKey
}

func (g *GetAppResponse) GetOrgId() string {
	if g == nil {
		return ""
	}
	return g.OrgId
}

func (g *GetAppResponse) GetEnvCount() float64 {
	if g == nil {
		return 0
	}
	return g.EnvCount
}

func (g *GetAppResponse) GetEnvTypes() []*GetAppResponseEnvTypesItem {
	if g == nil {
		return nil
	}
	return g.EnvTypes
}

func (g *GetAppResponse) GetCreatedAt() string {
	if g == nil {
		return ""
	}
	return g.CreatedAt
}

func (g *GetAppResponse) GetUpdatedAt() string {
	if g == nil {
		return ""
	}
	return g.UpdatedAt
}

func (g *GetAppResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAppResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAppResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAppResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAppResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetAppResponseEnvTypesItem struct {
	Id          string `json:"id" url:"id"`
	Name        string `json:"name" url:"name"`
	IsDefault   bool   `json:"is_default" url:"is_default"`
	IsProtected bool   `json:"is_protected" url:"is_protected"`
	Color       string `json:"color" url:"color"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetAppResponseEnvTypesItem) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetAppResponseEnvTypesItem) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetAppResponseEnvTypesItem) GetIsDefault() bool {
	if g == nil {
		return false
	}
	return g.IsDefault
}

func (g *GetAppResponseEnvTypesItem) GetIsProtected() bool {
	if g == nil {
		return false
	}
	return g.IsProtected
}

func (g *GetAppResponseEnvTypesItem) GetColor() string {
	if g == nil {
		return ""
	}
	return g.Color
}

func (g *GetAppResponseEnvTypesItem) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAppResponseEnvTypesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAppResponseEnvTypesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAppResponseEnvTypesItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAppResponseEnvTypesItem) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetAppsResponse = []*GetAppsResponseItem

type GetAppsResponseItem struct {
	Id              string                             `json:"id" url:"id"`
	Name            string                             `json:"name" url:"name"`
	Description     string                             `json:"description" url:"description"`
	EnableSecrets   bool                               `json:"enable_secrets" url:"enable_secrets"`
	IsManagedSecret bool                               `json:"is_managed_secret" url:"is_managed_secret"`
	PublicKey       *string                            `json:"public_key,omitempty" url:"public_key,omitempty"`
	Metadata        map[string]interface{}             `json:"metadata" url:"metadata"`
	OrgId           string                             `json:"org_id" url:"org_id"`
	EnvCount        float64                            `json:"envCount" url:"envCount"`
	EnvTypes        []*GetAppsResponseItemEnvTypesItem `json:"env_types" url:"env_types"`
	CreatedAt       string                             `json:"created_at" url:"created_at"`
	UpdatedAt       string                             `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetAppsResponseItem) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetAppsResponseItem) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetAppsResponseItem) GetDescription() string {
	if g == nil {
		return ""
	}
	return g.Description
}

func (g *GetAppsResponseItem) GetEnableSecrets() bool {
	if g == nil {
		return false
	}
	return g.EnableSecrets
}

func (g *GetAppsResponseItem) GetIsManagedSecret() bool {
	if g == nil {
		return false
	}
	return g.IsManagedSecret
}

func (g *GetAppsResponseItem) GetPublicKey() *string {
	if g == nil {
		return nil
	}
	return g.PublicKey
}

func (g *GetAppsResponseItem) GetMetadata() map[string]interface{} {
	if g == nil {
		return nil
	}
	return g.Metadata
}

func (g *GetAppsResponseItem) GetOrgId() string {
	if g == nil {
		return ""
	}
	return g.OrgId
}

func (g *GetAppsResponseItem) GetEnvCount() float64 {
	if g == nil {
		return 0
	}
	return g.EnvCount
}

func (g *GetAppsResponseItem) GetEnvTypes() []*GetAppsResponseItemEnvTypesItem {
	if g == nil {
		return nil
	}
	return g.EnvTypes
}

func (g *GetAppsResponseItem) GetCreatedAt() string {
	if g == nil {
		return ""
	}
	return g.CreatedAt
}

func (g *GetAppsResponseItem) GetUpdatedAt() string {
	if g == nil {
		return ""
	}
	return g.UpdatedAt
}

func (g *GetAppsResponseItem) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAppsResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAppsResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAppsResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAppsResponseItem) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetAppsResponseItemEnvTypesItem struct {
	Id          string `json:"id" url:"id"`
	Name        string `json:"name" url:"name"`
	IsDefault   bool   `json:"is_default" url:"is_default"`
	IsProtected bool   `json:"is_protected" url:"is_protected"`
	Color       string `json:"color" url:"color"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetAppsResponseItemEnvTypesItem) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GetAppsResponseItemEnvTypesItem) GetName() string {
	if g == nil {
		return ""
	}
	return g.Name
}

func (g *GetAppsResponseItemEnvTypesItem) GetIsDefault() bool {
	if g == nil {
		return false
	}
	return g.IsDefault
}

func (g *GetAppsResponseItemEnvTypesItem) GetIsProtected() bool {
	if g == nil {
		return false
	}
	return g.IsProtected
}

func (g *GetAppsResponseItemEnvTypesItem) GetColor() string {
	if g == nil {
		return ""
	}
	return g.Color
}

func (g *GetAppsResponseItemEnvTypesItem) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetAppsResponseItemEnvTypesItem) UnmarshalJSON(data []byte) error {
	type unmarshaler GetAppsResponseItemEnvTypesItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetAppsResponseItemEnvTypesItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetAppsResponseItemEnvTypesItem) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type UpdateAppResponse struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateAppResponse) GetMessage() string {
	if u == nil {
		return ""
	}
	return u.Message
}

func (u *UpdateAppResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateAppResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateAppResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateAppResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAppResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateAppRequest struct {
	Name        *string                `json:"name,omitempty" url:"-"`
	Description *string                `json:"description,omitempty" url:"-"`
	Metadata    map[string]interface{} `json:"metadata,omitempty" url:"-"`
}
