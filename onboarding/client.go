// Code generated by Fern. DO NOT EDIT.

package onboarding

import (
	context "context"
	envsyncgosdk "github.com/EnvSync-Cloud/envsync-go-sdk"
	core "github.com/EnvSync-Cloud/envsync-go-sdk/core"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
	option "github.com/EnvSync-Cloud/envsync-go-sdk/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Create an organization invite
func (c *Client) CreateOrgInvite(
	ctx context.Context,
	request *envsyncgosdk.CreateOrgInviteRequest,
	opts ...option.RequestOption,
) (*envsyncgosdk.CreateOrgInviteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := baseURL + "/api/onboarding/org"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.CreateOrgInviteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get organization invite by code
func (c *Client) GetOrgInviteByCode(
	ctx context.Context,
	inviteCode string,
	opts ...option.RequestOption,
) (*envsyncgosdk.GetOrgInviteByCodeResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/onboarding/org/%v",
		inviteCode,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.GetOrgInviteByCodeResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Accept organization invite
func (c *Client) AcceptOrgInvite(
	ctx context.Context,
	inviteCode string,
	request *envsyncgosdk.AcceptOrgInviteRequest,
	opts ...option.RequestOption,
) (*envsyncgosdk.AcceptOrgInviteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/onboarding/org/%v/accept",
		inviteCode,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.AcceptOrgInviteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get user invite by code
func (c *Client) GetUserInviteByCode(
	ctx context.Context,
	inviteCode string,
	opts ...option.RequestOption,
) (*envsyncgosdk.GetUserInviteByTokenResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/onboarding/user/%v",
		inviteCode,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.GetUserInviteByTokenResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Update user invite
func (c *Client) UpdateUserInvite(
	ctx context.Context,
	inviteCode string,
	request *envsyncgosdk.UpdateUserInviteRequest,
	opts ...option.RequestOption,
) (*envsyncgosdk.UpdateUserInviteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/onboarding/user/%v",
		inviteCode,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.UpdateUserInviteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPatch,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Accept user invite
func (c *Client) AcceptUserInvite(
	ctx context.Context,
	inviteCode string,
	request *envsyncgosdk.AcceptUserInviteRequest,
	opts ...option.RequestOption,
) (*envsyncgosdk.AcceptUserInviteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/onboarding/user/%v/accept",
		inviteCode,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.AcceptUserInviteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPut,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get all user invites
func (c *Client) GetAllUserInvites(
	ctx context.Context,
	opts ...option.RequestOption,
) (*envsyncgosdk.GetUserInviteByTokenResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := baseURL + "/api/onboarding/user"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.GetUserInviteByTokenResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Create a user invite
func (c *Client) CreateUserInvite(
	ctx context.Context,
	request *envsyncgosdk.CreateUserInviteRequest,
	opts ...option.RequestOption,
) (*envsyncgosdk.CreateUserInviteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := baseURL + "/api/onboarding/user"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.CreateUserInviteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Delete user invite
func (c *Client) DeleteUserInvite(
	ctx context.Context,
	inviteId string,
	request *envsyncgosdk.DeleteUserInviteResponse,
	opts ...option.RequestOption,
) (*envsyncgosdk.DeleteUserInviteResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/onboarding/user/%v",
		inviteId,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.DeleteUserInviteResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodDelete,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
