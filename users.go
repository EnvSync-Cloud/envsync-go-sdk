// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type UserResponse struct {
	Id                string  `json:"id" url:"id"`
	Email             string  `json:"email" url:"email"`
	FullName          string  `json:"full_name" url:"full_name"`
	ProfilePictureUrl *string `json:"profile_picture_url,omitempty" url:"profile_picture_url,omitempty"`
	OrgId             string  `json:"org_id" url:"org_id"`
	RoleId            string  `json:"role_id" url:"role_id"`
	Auth0Id           *string `json:"auth0_id,omitempty" url:"auth0_id,omitempty"`
	IsActive          bool    `json:"is_active" url:"is_active"`
	CreatedAt         string  `json:"created_at" url:"created_at"`
	UpdatedAt         string  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UserResponse) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UserResponse) GetEmail() string {
	if u == nil {
		return ""
	}
	return u.Email
}

func (u *UserResponse) GetFullName() string {
	if u == nil {
		return ""
	}
	return u.FullName
}

func (u *UserResponse) GetProfilePictureUrl() *string {
	if u == nil {
		return nil
	}
	return u.ProfilePictureUrl
}

func (u *UserResponse) GetOrgId() string {
	if u == nil {
		return ""
	}
	return u.OrgId
}

func (u *UserResponse) GetRoleId() string {
	if u == nil {
		return ""
	}
	return u.RoleId
}

func (u *UserResponse) GetAuth0Id() *string {
	if u == nil {
		return nil
	}
	return u.Auth0Id
}

func (u *UserResponse) GetIsActive() bool {
	if u == nil {
		return false
	}
	return u.IsActive
}

func (u *UserResponse) GetCreatedAt() string {
	if u == nil {
		return ""
	}
	return u.CreatedAt
}

func (u *UserResponse) GetUpdatedAt() string {
	if u == nil {
		return ""
	}
	return u.UpdatedAt
}

func (u *UserResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsersResponse = []*UserResponse

type UpdateUserRequest struct {
	FullName          *string `json:"full_name,omitempty" url:"-"`
	ProfilePictureUrl *string `json:"profile_picture_url,omitempty" url:"-"`
	Email             *string `json:"email,omitempty" url:"-"`
}
