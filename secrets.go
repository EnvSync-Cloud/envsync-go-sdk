// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type CreateSecretRequest struct {
	Key       string `json:"key" url:"-"`
	Value     string `json:"value" url:"-"`
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
}

type BatchDeleteSecretsRequest struct {
	AppId     string   `json:"app_id" url:"-"`
	EnvTypeId string   `json:"env_type_id" url:"-"`
	Keys      []string `json:"keys,omitempty" url:"-"`
}

type DeleteSecretRequest struct {
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
	Key       string `json:"key" url:"-"`
}

type RevealSecretsRequest struct {
	AppId     string   `json:"app_id" url:"-"`
	EnvTypeId string   `json:"env_type_id" url:"-"`
	Keys      []string `json:"keys,omitempty" url:"-"`
}

type BatchCreateSecretsRequest struct {
	AppId     string                               `json:"app_id" url:"app_id"`
	EnvTypeId string                               `json:"env_type_id" url:"env_type_id"`
	Envs      []*BatchCreateSecretsRequestEnvsItem `json:"envs" url:"envs"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchCreateSecretsRequest) GetAppId() string {
	if b == nil {
		return ""
	}
	return b.AppId
}

func (b *BatchCreateSecretsRequest) GetEnvTypeId() string {
	if b == nil {
		return ""
	}
	return b.EnvTypeId
}

func (b *BatchCreateSecretsRequest) GetEnvs() []*BatchCreateSecretsRequestEnvsItem {
	if b == nil {
		return nil
	}
	return b.Envs
}

func (b *BatchCreateSecretsRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchCreateSecretsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchCreateSecretsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchCreateSecretsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchCreateSecretsRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchCreateSecretsRequestEnvsItem struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchCreateSecretsRequestEnvsItem) GetKey() string {
	if b == nil {
		return ""
	}
	return b.Key
}

func (b *BatchCreateSecretsRequestEnvsItem) GetValue() string {
	if b == nil {
		return ""
	}
	return b.Value
}

func (b *BatchCreateSecretsRequestEnvsItem) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchCreateSecretsRequestEnvsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchCreateSecretsRequestEnvsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchCreateSecretsRequestEnvsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchCreateSecretsRequestEnvsItem) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchSecretsResponse struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchSecretsResponse) GetMessage() string {
	if b == nil {
		return ""
	}
	return b.Message
}

func (b *BatchSecretsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchSecretsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchSecretsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchSecretsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchSecretsResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type GetSecretRequest struct {
	AppId     string `json:"app_id" url:"app_id"`
	EnvTypeId string `json:"env_type_id" url:"env_type_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetSecretRequest) GetAppId() string {
	if g == nil {
		return ""
	}
	return g.AppId
}

func (g *GetSecretRequest) GetEnvTypeId() string {
	if g == nil {
		return ""
	}
	return g.EnvTypeId
}

func (g *GetSecretRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSecretRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSecretRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSecretRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSecretRequest) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type RevealSecretsResponse = []*RevealSecretsResponseItem

type RevealSecretsResponseItem struct {
	Id        string `json:"id" url:"id"`
	Key       string `json:"key" url:"key"`
	Value     string `json:"value" url:"value"`
	AppId     string `json:"app_id" url:"app_id"`
	EnvTypeId string `json:"env_type_id" url:"env_type_id"`
	OrgId     string `json:"org_id" url:"org_id"`
	CreatedAt string `json:"created_at" url:"created_at"`
	UpdatedAt string `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RevealSecretsResponseItem) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RevealSecretsResponseItem) GetKey() string {
	if r == nil {
		return ""
	}
	return r.Key
}

func (r *RevealSecretsResponseItem) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

func (r *RevealSecretsResponseItem) GetAppId() string {
	if r == nil {
		return ""
	}
	return r.AppId
}

func (r *RevealSecretsResponseItem) GetEnvTypeId() string {
	if r == nil {
		return ""
	}
	return r.EnvTypeId
}

func (r *RevealSecretsResponseItem) GetOrgId() string {
	if r == nil {
		return ""
	}
	return r.OrgId
}

func (r *RevealSecretsResponseItem) GetCreatedAt() string {
	if r == nil {
		return ""
	}
	return r.CreatedAt
}

func (r *RevealSecretsResponseItem) GetUpdatedAt() string {
	if r == nil {
		return ""
	}
	return r.UpdatedAt
}

func (r *RevealSecretsResponseItem) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RevealSecretsResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler RevealSecretsResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RevealSecretsResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RevealSecretsResponseItem) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SecretResponse struct {
	Id        string `json:"id" url:"id"`
	Key       string `json:"key" url:"key"`
	Value     string `json:"value" url:"value"`
	AppId     string `json:"app_id" url:"app_id"`
	EnvTypeId string `json:"env_type_id" url:"env_type_id"`
	OrgId     string `json:"org_id" url:"org_id"`
	CreatedAt string `json:"created_at" url:"created_at"`
	UpdatedAt string `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretResponse) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SecretResponse) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SecretResponse) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *SecretResponse) GetAppId() string {
	if s == nil {
		return ""
	}
	return s.AppId
}

func (s *SecretResponse) GetEnvTypeId() string {
	if s == nil {
		return ""
	}
	return s.EnvTypeId
}

func (s *SecretResponse) GetOrgId() string {
	if s == nil {
		return ""
	}
	return s.OrgId
}

func (s *SecretResponse) GetCreatedAt() string {
	if s == nil {
		return ""
	}
	return s.CreatedAt
}

func (s *SecretResponse) GetUpdatedAt() string {
	if s == nil {
		return ""
	}
	return s.UpdatedAt
}

func (s *SecretResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretsResponse = []*SecretResponse

type UpdateSecretRequest struct {
	Value     string `json:"value" url:"-"`
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
}
