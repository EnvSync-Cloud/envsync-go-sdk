// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
	time "time"
)

type EnvDiffRequest struct {
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
	FromPitId string `json:"from_pit_id" url:"-"`
	ToPitId   string `json:"to_pit_id" url:"-"`
}

type EnvHistoryRequest struct {
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
	Page      *int   `json:"page,omitempty" url:"-"`
	PerPage   *int   `json:"per_page,omitempty" url:"-"`
}

type EnvPitRequest struct {
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
	PitId     string `json:"pit_id" url:"-"`
}

type EnvTimestampRequest struct {
	AppId     string    `json:"app_id" url:"-"`
	EnvTypeId string    `json:"env_type_id" url:"-"`
	Timestamp time.Time `json:"timestamp" url:"-"`
}

func (e *EnvTimestampRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvTimestampRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*e = EnvTimestampRequest(body)
	return nil
}

func (e *EnvTimestampRequest) MarshalJSON() ([]byte, error) {
	type embed EnvTimestampRequest
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*e),
		Timestamp: internal.NewDateTime(e.Timestamp),
	}
	return json.Marshal(marshaler)
}

type VariableTimelineRequest struct {
	AppId                      string `json:"app_id" url:"-"`
	EnvTypeId                  string `json:"env_type_id" url:"-"`
	VariableTimelineRequestKey string `json:"key" url:"-"`
	Limit                      *int   `json:"limit,omitempty" url:"-"`
}

type EnvDiffResponse struct {
	Added    []*EnvDiffResponseAddedItem    `json:"added" url:"added"`
	Modified []*EnvDiffResponseModifiedItem `json:"modified" url:"modified"`
	Deleted  []*EnvDiffResponseDeletedItem  `json:"deleted" url:"deleted"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvDiffResponse) GetAdded() []*EnvDiffResponseAddedItem {
	if e == nil {
		return nil
	}
	return e.Added
}

func (e *EnvDiffResponse) GetModified() []*EnvDiffResponseModifiedItem {
	if e == nil {
		return nil
	}
	return e.Modified
}

func (e *EnvDiffResponse) GetDeleted() []*EnvDiffResponseDeletedItem {
	if e == nil {
		return nil
	}
	return e.Deleted
}

func (e *EnvDiffResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvDiffResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvDiffResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvDiffResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvDiffResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvDiffResponseAddedItem struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvDiffResponseAddedItem) GetKey() string {
	if e == nil {
		return ""
	}
	return e.Key
}

func (e *EnvDiffResponseAddedItem) GetValue() string {
	if e == nil {
		return ""
	}
	return e.Value
}

func (e *EnvDiffResponseAddedItem) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvDiffResponseAddedItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvDiffResponseAddedItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvDiffResponseAddedItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvDiffResponseAddedItem) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvDiffResponseDeletedItem struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvDiffResponseDeletedItem) GetKey() string {
	if e == nil {
		return ""
	}
	return e.Key
}

func (e *EnvDiffResponseDeletedItem) GetValue() string {
	if e == nil {
		return ""
	}
	return e.Value
}

func (e *EnvDiffResponseDeletedItem) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvDiffResponseDeletedItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvDiffResponseDeletedItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvDiffResponseDeletedItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvDiffResponseDeletedItem) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvDiffResponseModifiedItem struct {
	Key      string `json:"key" url:"key"`
	OldValue string `json:"old_value" url:"old_value"`
	NewValue string `json:"new_value" url:"new_value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvDiffResponseModifiedItem) GetKey() string {
	if e == nil {
		return ""
	}
	return e.Key
}

func (e *EnvDiffResponseModifiedItem) GetOldValue() string {
	if e == nil {
		return ""
	}
	return e.OldValue
}

func (e *EnvDiffResponseModifiedItem) GetNewValue() string {
	if e == nil {
		return ""
	}
	return e.NewValue
}

func (e *EnvDiffResponseModifiedItem) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvDiffResponseModifiedItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvDiffResponseModifiedItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvDiffResponseModifiedItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvDiffResponseModifiedItem) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvHistoryResponse struct {
	Pits       []*EnvHistoryResponsePitsItem `json:"pits" url:"pits"`
	TotalPages int                           `json:"totalPages" url:"totalPages"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvHistoryResponse) GetPits() []*EnvHistoryResponsePitsItem {
	if e == nil {
		return nil
	}
	return e.Pits
}

func (e *EnvHistoryResponse) GetTotalPages() int {
	if e == nil {
		return 0
	}
	return e.TotalPages
}

func (e *EnvHistoryResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvHistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvHistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvHistoryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvHistoryResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvHistoryResponsePitsItem struct {
	Id                   string `json:"id" url:"id"`
	OrgId                string `json:"org_id" url:"org_id"`
	AppId                string `json:"app_id" url:"app_id"`
	EnvTypeId            string `json:"env_type_id" url:"env_type_id"`
	ChangeRequestMessage string `json:"change_request_message" url:"change_request_message"`
	UserId               string `json:"user_id" url:"user_id"`
	CreatedAt            string `json:"created_at" url:"created_at"`
	UpdatedAt            string `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvHistoryResponsePitsItem) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EnvHistoryResponsePitsItem) GetOrgId() string {
	if e == nil {
		return ""
	}
	return e.OrgId
}

func (e *EnvHistoryResponsePitsItem) GetAppId() string {
	if e == nil {
		return ""
	}
	return e.AppId
}

func (e *EnvHistoryResponsePitsItem) GetEnvTypeId() string {
	if e == nil {
		return ""
	}
	return e.EnvTypeId
}

func (e *EnvHistoryResponsePitsItem) GetChangeRequestMessage() string {
	if e == nil {
		return ""
	}
	return e.ChangeRequestMessage
}

func (e *EnvHistoryResponsePitsItem) GetUserId() string {
	if e == nil {
		return ""
	}
	return e.UserId
}

func (e *EnvHistoryResponsePitsItem) GetCreatedAt() string {
	if e == nil {
		return ""
	}
	return e.CreatedAt
}

func (e *EnvHistoryResponsePitsItem) GetUpdatedAt() string {
	if e == nil {
		return ""
	}
	return e.UpdatedAt
}

func (e *EnvHistoryResponsePitsItem) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvHistoryResponsePitsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvHistoryResponsePitsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvHistoryResponsePitsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvHistoryResponsePitsItem) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvPitStateResponse = []*EnvPitStateResponseItem

type EnvPitStateResponseItem struct {
	Key         string `json:"key" url:"key"`
	Value       string `json:"value" url:"value"`
	LastUpdated string `json:"last_updated" url:"last_updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvPitStateResponseItem) GetKey() string {
	if e == nil {
		return ""
	}
	return e.Key
}

func (e *EnvPitStateResponseItem) GetValue() string {
	if e == nil {
		return ""
	}
	return e.Value
}

func (e *EnvPitStateResponseItem) GetLastUpdated() string {
	if e == nil {
		return ""
	}
	return e.LastUpdated
}

func (e *EnvPitStateResponseItem) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvPitStateResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvPitStateResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvPitStateResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvPitStateResponseItem) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type VariableTimelineResponse = []*VariableTimelineResponseItem

type VariableTimelineResponseItem struct {
	PitId                string                                `json:"pit_id" url:"pit_id"`
	ChangeRequestMessage string                                `json:"change_request_message" url:"change_request_message"`
	UserId               string                                `json:"user_id" url:"user_id"`
	CreatedAt            string                                `json:"created_at" url:"created_at"`
	Value                string                                `json:"value" url:"value"`
	Operation            VariableTimelineResponseItemOperation `json:"operation" url:"operation"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (v *VariableTimelineResponseItem) GetPitId() string {
	if v == nil {
		return ""
	}
	return v.PitId
}

func (v *VariableTimelineResponseItem) GetChangeRequestMessage() string {
	if v == nil {
		return ""
	}
	return v.ChangeRequestMessage
}

func (v *VariableTimelineResponseItem) GetUserId() string {
	if v == nil {
		return ""
	}
	return v.UserId
}

func (v *VariableTimelineResponseItem) GetCreatedAt() string {
	if v == nil {
		return ""
	}
	return v.CreatedAt
}

func (v *VariableTimelineResponseItem) GetValue() string {
	if v == nil {
		return ""
	}
	return v.Value
}

func (v *VariableTimelineResponseItem) GetOperation() VariableTimelineResponseItemOperation {
	if v == nil {
		return ""
	}
	return v.Operation
}

func (v *VariableTimelineResponseItem) GetExtraProperties() map[string]interface{} {
	return v.extraProperties
}

func (v *VariableTimelineResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler VariableTimelineResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = VariableTimelineResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *v)
	if err != nil {
		return err
	}
	v.extraProperties = extraProperties
	v.rawJSON = json.RawMessage(data)
	return nil
}

func (v *VariableTimelineResponseItem) String() string {
	if len(v.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(v.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

type VariableTimelineResponseItemOperation string

const (
	VariableTimelineResponseItemOperationCreate VariableTimelineResponseItemOperation = "CREATE"
	VariableTimelineResponseItemOperationUpdate VariableTimelineResponseItemOperation = "UPDATE"
	VariableTimelineResponseItemOperationDelete VariableTimelineResponseItemOperation = "DELETE"
)

func NewVariableTimelineResponseItemOperationFromString(s string) (VariableTimelineResponseItemOperation, error) {
	switch s {
	case "CREATE":
		return VariableTimelineResponseItemOperationCreate, nil
	case "UPDATE":
		return VariableTimelineResponseItemOperationUpdate, nil
	case "DELETE":
		return VariableTimelineResponseItemOperationDelete, nil
	}
	var t VariableTimelineResponseItemOperation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (v VariableTimelineResponseItemOperation) Ptr() *VariableTimelineResponseItemOperation {
	return &v
}
