// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
	time "time"
)

type SecretDiffRequest struct {
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
	FromPitId string `json:"from_pit_id" url:"-"`
	ToPitId   string `json:"to_pit_id" url:"-"`
}

type SecretHistoryRequest struct {
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
	Page      string `json:"page" url:"-"`
	PerPage   string `json:"per_page" url:"-"`
}

type SecretVariableTimelineRequest struct {
	AppId                            string `json:"app_id" url:"-"`
	EnvTypeId                        string `json:"env_type_id" url:"-"`
	SecretVariableTimelineRequestKey string `json:"key" url:"-"`
	Limit                            *int   `json:"limit,omitempty" url:"-"`
}

type SecretPitRequest struct {
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
	PitId     string `json:"pit_id" url:"-"`
}

type SecretTimestampRequest struct {
	AppId     string    `json:"app_id" url:"-"`
	EnvTypeId string    `json:"env_type_id" url:"-"`
	Timestamp time.Time `json:"timestamp" url:"-"`
}

func (s *SecretTimestampRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretTimestampRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*s = SecretTimestampRequest(body)
	return nil
}

func (s *SecretTimestampRequest) MarshalJSON() ([]byte, error) {
	type embed SecretTimestampRequest
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*s),
		Timestamp: internal.NewDateTime(s.Timestamp),
	}
	return json.Marshal(marshaler)
}

type SecretDiffResponse struct {
	Added    []*SecretDiffResponseAddedItem    `json:"added" url:"added"`
	Modified []*SecretDiffResponseModifiedItem `json:"modified" url:"modified"`
	Deleted  []*SecretDiffResponseDeletedItem  `json:"deleted" url:"deleted"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretDiffResponse) GetAdded() []*SecretDiffResponseAddedItem {
	if s == nil {
		return nil
	}
	return s.Added
}

func (s *SecretDiffResponse) GetModified() []*SecretDiffResponseModifiedItem {
	if s == nil {
		return nil
	}
	return s.Modified
}

func (s *SecretDiffResponse) GetDeleted() []*SecretDiffResponseDeletedItem {
	if s == nil {
		return nil
	}
	return s.Deleted
}

func (s *SecretDiffResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretDiffResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretDiffResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretDiffResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretDiffResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretDiffResponseAddedItem struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretDiffResponseAddedItem) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SecretDiffResponseAddedItem) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *SecretDiffResponseAddedItem) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretDiffResponseAddedItem) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretDiffResponseAddedItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretDiffResponseAddedItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretDiffResponseAddedItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretDiffResponseDeletedItem struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretDiffResponseDeletedItem) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SecretDiffResponseDeletedItem) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *SecretDiffResponseDeletedItem) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretDiffResponseDeletedItem) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretDiffResponseDeletedItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretDiffResponseDeletedItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretDiffResponseDeletedItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretDiffResponseModifiedItem struct {
	Key      string `json:"key" url:"key"`
	OldValue string `json:"old_value" url:"old_value"`
	NewValue string `json:"new_value" url:"new_value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretDiffResponseModifiedItem) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SecretDiffResponseModifiedItem) GetOldValue() string {
	if s == nil {
		return ""
	}
	return s.OldValue
}

func (s *SecretDiffResponseModifiedItem) GetNewValue() string {
	if s == nil {
		return ""
	}
	return s.NewValue
}

func (s *SecretDiffResponseModifiedItem) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretDiffResponseModifiedItem) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretDiffResponseModifiedItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretDiffResponseModifiedItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretDiffResponseModifiedItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretHistoryResponse struct {
	Pits       []*SecretHistoryResponsePitsItem `json:"pits" url:"pits"`
	TotalPages int                              `json:"totalPages" url:"totalPages"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretHistoryResponse) GetPits() []*SecretHistoryResponsePitsItem {
	if s == nil {
		return nil
	}
	return s.Pits
}

func (s *SecretHistoryResponse) GetTotalPages() int {
	if s == nil {
		return 0
	}
	return s.TotalPages
}

func (s *SecretHistoryResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretHistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretHistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretHistoryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretHistoryResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretHistoryResponsePitsItem struct {
	Id                   string `json:"id" url:"id"`
	OrgId                string `json:"org_id" url:"org_id"`
	AppId                string `json:"app_id" url:"app_id"`
	EnvTypeId            string `json:"env_type_id" url:"env_type_id"`
	ChangeRequestMessage string `json:"change_request_message" url:"change_request_message"`
	UserId               string `json:"user_id" url:"user_id"`
	CreatedAt            string `json:"created_at" url:"created_at"`
	UpdatedAt            string `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretHistoryResponsePitsItem) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SecretHistoryResponsePitsItem) GetOrgId() string {
	if s == nil {
		return ""
	}
	return s.OrgId
}

func (s *SecretHistoryResponsePitsItem) GetAppId() string {
	if s == nil {
		return ""
	}
	return s.AppId
}

func (s *SecretHistoryResponsePitsItem) GetEnvTypeId() string {
	if s == nil {
		return ""
	}
	return s.EnvTypeId
}

func (s *SecretHistoryResponsePitsItem) GetChangeRequestMessage() string {
	if s == nil {
		return ""
	}
	return s.ChangeRequestMessage
}

func (s *SecretHistoryResponsePitsItem) GetUserId() string {
	if s == nil {
		return ""
	}
	return s.UserId
}

func (s *SecretHistoryResponsePitsItem) GetCreatedAt() string {
	if s == nil {
		return ""
	}
	return s.CreatedAt
}

func (s *SecretHistoryResponsePitsItem) GetUpdatedAt() string {
	if s == nil {
		return ""
	}
	return s.UpdatedAt
}

func (s *SecretHistoryResponsePitsItem) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretHistoryResponsePitsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretHistoryResponsePitsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretHistoryResponsePitsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretHistoryResponsePitsItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretPitStateResponse = []*SecretPitStateResponseItem

type SecretPitStateResponseItem struct {
	Key         string `json:"key" url:"key"`
	Value       string `json:"value" url:"value"`
	LastUpdated string `json:"last_updated" url:"last_updated"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretPitStateResponseItem) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SecretPitStateResponseItem) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *SecretPitStateResponseItem) GetLastUpdated() string {
	if s == nil {
		return ""
	}
	return s.LastUpdated
}

func (s *SecretPitStateResponseItem) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretPitStateResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretPitStateResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretPitStateResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretPitStateResponseItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretVariableTimelineResponse = []*SecretVariableTimelineResponseItem

type SecretVariableTimelineResponseItem struct {
	PitId                string                                      `json:"pit_id" url:"pit_id"`
	ChangeRequestMessage string                                      `json:"change_request_message" url:"change_request_message"`
	UserId               string                                      `json:"user_id" url:"user_id"`
	CreatedAt            string                                      `json:"created_at" url:"created_at"`
	Value                string                                      `json:"value" url:"value"`
	Operation            SecretVariableTimelineResponseItemOperation `json:"operation" url:"operation"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretVariableTimelineResponseItem) GetPitId() string {
	if s == nil {
		return ""
	}
	return s.PitId
}

func (s *SecretVariableTimelineResponseItem) GetChangeRequestMessage() string {
	if s == nil {
		return ""
	}
	return s.ChangeRequestMessage
}

func (s *SecretVariableTimelineResponseItem) GetUserId() string {
	if s == nil {
		return ""
	}
	return s.UserId
}

func (s *SecretVariableTimelineResponseItem) GetCreatedAt() string {
	if s == nil {
		return ""
	}
	return s.CreatedAt
}

func (s *SecretVariableTimelineResponseItem) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *SecretVariableTimelineResponseItem) GetOperation() SecretVariableTimelineResponseItemOperation {
	if s == nil {
		return ""
	}
	return s.Operation
}

func (s *SecretVariableTimelineResponseItem) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretVariableTimelineResponseItem) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretVariableTimelineResponseItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretVariableTimelineResponseItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretVariableTimelineResponseItem) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretVariableTimelineResponseItemOperation string

const (
	SecretVariableTimelineResponseItemOperationCreate SecretVariableTimelineResponseItemOperation = "CREATE"
	SecretVariableTimelineResponseItemOperationUpdate SecretVariableTimelineResponseItemOperation = "UPDATE"
	SecretVariableTimelineResponseItemOperationDelete SecretVariableTimelineResponseItemOperation = "DELETE"
)

func NewSecretVariableTimelineResponseItemOperationFromString(s string) (SecretVariableTimelineResponseItemOperation, error) {
	switch s {
	case "CREATE":
		return SecretVariableTimelineResponseItemOperationCreate, nil
	case "UPDATE":
		return SecretVariableTimelineResponseItemOperationUpdate, nil
	case "DELETE":
		return SecretVariableTimelineResponseItemOperationDelete, nil
	}
	var t SecretVariableTimelineResponseItemOperation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SecretVariableTimelineResponseItemOperation) Ptr() *SecretVariableTimelineResponseItemOperation {
	return &s
}
