// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type CreateEnvRequest struct {
	Key       string `json:"key" url:"-"`
	Value     string `json:"value" url:"-"`
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
}

type BatchDeleteEnvsRequest struct {
	AppId     string   `json:"app_id" url:"-"`
	EnvTypeId string   `json:"env_type_id" url:"-"`
	Keys      []string `json:"keys,omitempty" url:"-"`
}

type BatchCreateEnvsRequest struct {
	AppId     string                            `json:"app_id" url:"app_id"`
	EnvTypeId string                            `json:"env_type_id" url:"env_type_id"`
	Envs      []*BatchCreateEnvsRequestEnvsItem `json:"envs" url:"envs"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchCreateEnvsRequest) GetAppId() string {
	if b == nil {
		return ""
	}
	return b.AppId
}

func (b *BatchCreateEnvsRequest) GetEnvTypeId() string {
	if b == nil {
		return ""
	}
	return b.EnvTypeId
}

func (b *BatchCreateEnvsRequest) GetEnvs() []*BatchCreateEnvsRequestEnvsItem {
	if b == nil {
		return nil
	}
	return b.Envs
}

func (b *BatchCreateEnvsRequest) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchCreateEnvsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchCreateEnvsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchCreateEnvsRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchCreateEnvsRequest) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchCreateEnvsRequestEnvsItem struct {
	Key   string `json:"key" url:"key"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchCreateEnvsRequestEnvsItem) GetKey() string {
	if b == nil {
		return ""
	}
	return b.Key
}

func (b *BatchCreateEnvsRequestEnvsItem) GetValue() string {
	if b == nil {
		return ""
	}
	return b.Value
}

func (b *BatchCreateEnvsRequestEnvsItem) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchCreateEnvsRequestEnvsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchCreateEnvsRequestEnvsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchCreateEnvsRequestEnvsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchCreateEnvsRequestEnvsItem) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BatchEnvsResponse struct {
	Message string `json:"message" url:"message"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BatchEnvsResponse) GetMessage() string {
	if b == nil {
		return ""
	}
	return b.Message
}

func (b *BatchEnvsResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BatchEnvsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BatchEnvsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BatchEnvsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BatchEnvsResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type DeleteEnvRequest struct {
	AppId     string `json:"app_id" url:"app_id"`
	EnvTypeId string `json:"env_type_id" url:"env_type_id"`
	Key       string `json:"key" url:"key"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteEnvRequest) GetAppId() string {
	if d == nil {
		return ""
	}
	return d.AppId
}

func (d *DeleteEnvRequest) GetEnvTypeId() string {
	if d == nil {
		return ""
	}
	return d.EnvTypeId
}

func (d *DeleteEnvRequest) GetKey() string {
	if d == nil {
		return ""
	}
	return d.Key
}

func (d *DeleteEnvRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteEnvRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteEnvRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteEnvRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteEnvRequest) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EnvResponse struct {
	Id        string `json:"id" url:"id"`
	Key       string `json:"key" url:"key"`
	Value     string `json:"value" url:"value"`
	AppId     string `json:"app_id" url:"app_id"`
	EnvTypeId string `json:"env_type_id" url:"env_type_id"`
	OrgId     string `json:"org_id" url:"org_id"`
	CreatedAt string `json:"created_at" url:"created_at"`
	UpdatedAt string `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EnvResponse) GetKey() string {
	if e == nil {
		return ""
	}
	return e.Key
}

func (e *EnvResponse) GetValue() string {
	if e == nil {
		return ""
	}
	return e.Value
}

func (e *EnvResponse) GetAppId() string {
	if e == nil {
		return ""
	}
	return e.AppId
}

func (e *EnvResponse) GetEnvTypeId() string {
	if e == nil {
		return ""
	}
	return e.EnvTypeId
}

func (e *EnvResponse) GetOrgId() string {
	if e == nil {
		return ""
	}
	return e.OrgId
}

func (e *EnvResponse) GetCreatedAt() string {
	if e == nil {
		return ""
	}
	return e.CreatedAt
}

func (e *EnvResponse) GetUpdatedAt() string {
	if e == nil {
		return ""
	}
	return e.UpdatedAt
}

func (e *EnvResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvsResponse = []*EnvResponse

type GetEnvRequest struct {
	AppId     string `json:"app_id" url:"app_id"`
	EnvTypeId string `json:"env_type_id" url:"env_type_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetEnvRequest) GetAppId() string {
	if g == nil {
		return ""
	}
	return g.AppId
}

func (g *GetEnvRequest) GetEnvTypeId() string {
	if g == nil {
		return ""
	}
	return g.EnvTypeId
}

func (g *GetEnvRequest) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetEnvRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEnvRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEnvRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEnvRequest) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type UpdateEnvRequest struct {
	Value     string `json:"value" url:"-"`
	AppId     string `json:"app_id" url:"-"`
	EnvTypeId string `json:"env_type_id" url:"-"`
}
