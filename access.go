// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type CallbackApiLoginRequest struct {
	Code string `json:"-" url:"code"`
}

type CallbackWebLoginRequest struct {
	Code string `json:"-" url:"code"`
}

type CallbackResponse struct {
	Message   string                     `json:"message" url:"message"`
	TokenData *CallbackResponseTokenData `json:"tokenData,omitempty" url:"tokenData,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CallbackResponse) GetMessage() string {
	if c == nil {
		return ""
	}
	return c.Message
}

func (c *CallbackResponse) GetTokenData() *CallbackResponseTokenData {
	if c == nil {
		return nil
	}
	return c.TokenData
}

func (c *CallbackResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CallbackResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CallbackResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CallbackResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CallbackResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CallbackResponseTokenData struct {
	AccessToken string  `json:"access_token" url:"access_token"`
	IdToken     string  `json:"id_token" url:"id_token"`
	Scope       string  `json:"scope" url:"scope"`
	ExpiresIn   float64 `json:"expires_in" url:"expires_in"`
	TokenType   string  `json:"token_type" url:"token_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CallbackResponseTokenData) GetAccessToken() string {
	if c == nil {
		return ""
	}
	return c.AccessToken
}

func (c *CallbackResponseTokenData) GetIdToken() string {
	if c == nil {
		return ""
	}
	return c.IdToken
}

func (c *CallbackResponseTokenData) GetScope() string {
	if c == nil {
		return ""
	}
	return c.Scope
}

func (c *CallbackResponseTokenData) GetExpiresIn() float64 {
	if c == nil {
		return 0
	}
	return c.ExpiresIn
}

func (c *CallbackResponseTokenData) GetTokenType() string {
	if c == nil {
		return ""
	}
	return c.TokenType
}

func (c *CallbackResponseTokenData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CallbackResponseTokenData) UnmarshalJSON(data []byte) error {
	type unmarshaler CallbackResponseTokenData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CallbackResponseTokenData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CallbackResponseTokenData) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type LoginUrlResponse struct {
	Message  string `json:"message" url:"message"`
	LoginUrl string `json:"loginUrl" url:"loginUrl"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *LoginUrlResponse) GetMessage() string {
	if l == nil {
		return ""
	}
	return l.Message
}

func (l *LoginUrlResponse) GetLoginUrl() string {
	if l == nil {
		return ""
	}
	return l.LoginUrl
}

func (l *LoginUrlResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *LoginUrlResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler LoginUrlResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = LoginUrlResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *LoginUrlResponse) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
