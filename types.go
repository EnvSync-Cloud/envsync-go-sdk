// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type ErrorResponse struct {
	Error string `json:"error" url:"error"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *ErrorResponse) GetError() string {
	if e == nil {
		return ""
	}
	return e.Error
}

func (e *ErrorResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *ErrorResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ErrorResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = ErrorResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *ErrorResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type RoleResponse struct {
	Id                 string  `json:"id" url:"id"`
	Name               string  `json:"name" url:"name"`
	OrgId              string  `json:"org_id" url:"org_id"`
	CanEdit            bool    `json:"can_edit" url:"can_edit"`
	CanView            bool    `json:"can_view" url:"can_view"`
	HaveApiAccess      bool    `json:"have_api_access" url:"have_api_access"`
	HaveBillingOptions bool    `json:"have_billing_options" url:"have_billing_options"`
	HaveWebhookAccess  bool    `json:"have_webhook_access" url:"have_webhook_access"`
	Color              *string `json:"color,omitempty" url:"color,omitempty"`
	IsAdmin            bool    `json:"is_admin" url:"is_admin"`
	IsMaster           bool    `json:"is_master" url:"is_master"`
	CreatedAt          string  `json:"created_at" url:"created_at"`
	UpdatedAt          string  `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RoleResponse) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RoleResponse) GetName() string {
	if r == nil {
		return ""
	}
	return r.Name
}

func (r *RoleResponse) GetOrgId() string {
	if r == nil {
		return ""
	}
	return r.OrgId
}

func (r *RoleResponse) GetCanEdit() bool {
	if r == nil {
		return false
	}
	return r.CanEdit
}

func (r *RoleResponse) GetCanView() bool {
	if r == nil {
		return false
	}
	return r.CanView
}

func (r *RoleResponse) GetHaveApiAccess() bool {
	if r == nil {
		return false
	}
	return r.HaveApiAccess
}

func (r *RoleResponse) GetHaveBillingOptions() bool {
	if r == nil {
		return false
	}
	return r.HaveBillingOptions
}

func (r *RoleResponse) GetHaveWebhookAccess() bool {
	if r == nil {
		return false
	}
	return r.HaveWebhookAccess
}

func (r *RoleResponse) GetColor() *string {
	if r == nil {
		return nil
	}
	return r.Color
}

func (r *RoleResponse) GetIsAdmin() bool {
	if r == nil {
		return false
	}
	return r.IsAdmin
}

func (r *RoleResponse) GetIsMaster() bool {
	if r == nil {
		return false
	}
	return r.IsMaster
}

func (r *RoleResponse) GetCreatedAt() string {
	if r == nil {
		return ""
	}
	return r.CreatedAt
}

func (r *RoleResponse) GetUpdatedAt() string {
	if r == nil {
		return ""
	}
	return r.UpdatedAt
}

func (r *RoleResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RoleResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RoleResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RoleResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RoleResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type UpdateRoleRequest struct {
	RoleId string `json:"role_id" url:"role_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateRoleRequest) GetRoleId() string {
	if u == nil {
		return ""
	}
	return u.RoleId
}

func (u *UpdateRoleRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateRoleRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateRoleRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateRoleRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateRoleRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UploadFileError struct {
	Error string `json:"error" url:"error"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UploadFileError) GetError() string {
	if u == nil {
		return ""
	}
	return u.Error
}

func (u *UploadFileError) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UploadFileError) UnmarshalJSON(data []byte) error {
	type unmarshaler UploadFileError
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UploadFileError(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UploadFileError) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
