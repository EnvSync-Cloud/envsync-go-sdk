// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
	time "time"
)

type SecretVariableRollbackToPitRequest struct {
	AppId           string  `json:"app_id" url:"-"`
	EnvTypeId       string  `json:"env_type_id" url:"-"`
	PitId           string  `json:"pit_id" url:"-"`
	RollbackMessage *string `json:"rollback_message,omitempty" url:"-"`
}

type SecretVariableRollbackToTimestampRequest struct {
	AppId           string    `json:"app_id" url:"-"`
	EnvTypeId       string    `json:"env_type_id" url:"-"`
	Timestamp       time.Time `json:"timestamp" url:"-"`
	RollbackMessage *string   `json:"rollback_message,omitempty" url:"-"`
}

func (s *SecretVariableRollbackToTimestampRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretVariableRollbackToTimestampRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*s = SecretVariableRollbackToTimestampRequest(body)
	return nil
}

func (s *SecretVariableRollbackToTimestampRequest) MarshalJSON() ([]byte, error) {
	type embed SecretVariableRollbackToTimestampRequest
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*s),
		Timestamp: internal.NewDateTime(s.Timestamp),
	}
	return json.Marshal(marshaler)
}

type RollbackSecretsToPitRequest struct {
	AppId           string  `json:"app_id" url:"-"`
	EnvTypeId       string  `json:"env_type_id" url:"-"`
	PitId           string  `json:"pit_id" url:"-"`
	RollbackMessage *string `json:"rollback_message,omitempty" url:"-"`
}

type RollbackSecretsToTimestampRequest struct {
	AppId           string    `json:"app_id" url:"-"`
	EnvTypeId       string    `json:"env_type_id" url:"-"`
	Timestamp       time.Time `json:"timestamp" url:"-"`
	RollbackMessage *string   `json:"rollback_message,omitempty" url:"-"`
}

func (r *RollbackSecretsToTimestampRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler RollbackSecretsToTimestampRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*r = RollbackSecretsToTimestampRequest(body)
	return nil
}

func (r *RollbackSecretsToTimestampRequest) MarshalJSON() ([]byte, error) {
	type embed RollbackSecretsToTimestampRequest
	var marshaler = struct {
		embed
		Timestamp *internal.DateTime `json:"timestamp"`
	}{
		embed:     embed(*r),
		Timestamp: internal.NewDateTime(r.Timestamp),
	}
	return json.Marshal(marshaler)
}

type RollbackSecretsResponse struct {
	Message             string                                   `json:"message" url:"message"`
	OperationsPerformed int                                      `json:"operations_performed" url:"operations_performed"`
	Operations          []*RollbackSecretsResponseOperationsItem `json:"operations" url:"operations"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RollbackSecretsResponse) GetMessage() string {
	if r == nil {
		return ""
	}
	return r.Message
}

func (r *RollbackSecretsResponse) GetOperationsPerformed() int {
	if r == nil {
		return 0
	}
	return r.OperationsPerformed
}

func (r *RollbackSecretsResponse) GetOperations() []*RollbackSecretsResponseOperationsItem {
	if r == nil {
		return nil
	}
	return r.Operations
}

func (r *RollbackSecretsResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RollbackSecretsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RollbackSecretsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RollbackSecretsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RollbackSecretsResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RollbackSecretsResponseOperationsItem struct {
	Key       string                                         `json:"key" url:"key"`
	Value     string                                         `json:"value" url:"value"`
	Operation RollbackSecretsResponseOperationsItemOperation `json:"operation" url:"operation"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RollbackSecretsResponseOperationsItem) GetKey() string {
	if r == nil {
		return ""
	}
	return r.Key
}

func (r *RollbackSecretsResponseOperationsItem) GetValue() string {
	if r == nil {
		return ""
	}
	return r.Value
}

func (r *RollbackSecretsResponseOperationsItem) GetOperation() RollbackSecretsResponseOperationsItemOperation {
	if r == nil {
		return ""
	}
	return r.Operation
}

func (r *RollbackSecretsResponseOperationsItem) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RollbackSecretsResponseOperationsItem) UnmarshalJSON(data []byte) error {
	type unmarshaler RollbackSecretsResponseOperationsItem
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RollbackSecretsResponseOperationsItem(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RollbackSecretsResponseOperationsItem) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RollbackSecretsResponseOperationsItemOperation string

const (
	RollbackSecretsResponseOperationsItemOperationCreate RollbackSecretsResponseOperationsItemOperation = "CREATE"
	RollbackSecretsResponseOperationsItemOperationUpdate RollbackSecretsResponseOperationsItemOperation = "UPDATE"
	RollbackSecretsResponseOperationsItemOperationDelete RollbackSecretsResponseOperationsItemOperation = "DELETE"
)

func NewRollbackSecretsResponseOperationsItemOperationFromString(s string) (RollbackSecretsResponseOperationsItemOperation, error) {
	switch s {
	case "CREATE":
		return RollbackSecretsResponseOperationsItemOperationCreate, nil
	case "UPDATE":
		return RollbackSecretsResponseOperationsItemOperationUpdate, nil
	case "DELETE":
		return RollbackSecretsResponseOperationsItemOperationDelete, nil
	}
	var t RollbackSecretsResponseOperationsItemOperation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RollbackSecretsResponseOperationsItemOperation) Ptr() *RollbackSecretsResponseOperationsItemOperation {
	return &r
}

type SecretVariableRollbackResponse struct {
	Message         string                                  `json:"message" url:"message"`
	Key             string                                  `json:"key" url:"key"`
	Operation       SecretVariableRollbackResponseOperation `json:"operation" url:"operation"`
	PreviousValue   *string                                 `json:"previous_value,omitempty" url:"previous_value,omitempty"`
	TargetValue     *string                                 `json:"target_value,omitempty" url:"target_value,omitempty"`
	PitId           *string                                 `json:"pit_id,omitempty" url:"pit_id,omitempty"`
	TargetTimestamp *string                                 `json:"target_timestamp,omitempty" url:"target_timestamp,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SecretVariableRollbackResponse) GetMessage() string {
	if s == nil {
		return ""
	}
	return s.Message
}

func (s *SecretVariableRollbackResponse) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SecretVariableRollbackResponse) GetOperation() SecretVariableRollbackResponseOperation {
	if s == nil {
		return ""
	}
	return s.Operation
}

func (s *SecretVariableRollbackResponse) GetPreviousValue() *string {
	if s == nil {
		return nil
	}
	return s.PreviousValue
}

func (s *SecretVariableRollbackResponse) GetTargetValue() *string {
	if s == nil {
		return nil
	}
	return s.TargetValue
}

func (s *SecretVariableRollbackResponse) GetPitId() *string {
	if s == nil {
		return nil
	}
	return s.PitId
}

func (s *SecretVariableRollbackResponse) GetTargetTimestamp() *string {
	if s == nil {
		return nil
	}
	return s.TargetTimestamp
}

func (s *SecretVariableRollbackResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SecretVariableRollbackResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SecretVariableRollbackResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SecretVariableRollbackResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SecretVariableRollbackResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SecretVariableRollbackResponseOperation string

const (
	SecretVariableRollbackResponseOperationCreate SecretVariableRollbackResponseOperation = "CREATE"
	SecretVariableRollbackResponseOperationUpdate SecretVariableRollbackResponseOperation = "UPDATE"
	SecretVariableRollbackResponseOperationDelete SecretVariableRollbackResponseOperation = "DELETE"
)

func NewSecretVariableRollbackResponseOperationFromString(s string) (SecretVariableRollbackResponseOperation, error) {
	switch s {
	case "CREATE":
		return SecretVariableRollbackResponseOperationCreate, nil
	case "UPDATE":
		return SecretVariableRollbackResponseOperationUpdate, nil
	case "DELETE":
		return SecretVariableRollbackResponseOperationDelete, nil
	}
	var t SecretVariableRollbackResponseOperation
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SecretVariableRollbackResponseOperation) Ptr() *SecretVariableRollbackResponseOperation {
	return &s
}
