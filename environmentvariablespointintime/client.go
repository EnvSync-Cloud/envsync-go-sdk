// Code generated by Fern. DO NOT EDIT.

package environmentvariablespointintime

import (
	context "context"
	envsyncgosdk "github.com/EnvSync-Cloud/envsync-go-sdk"
	core "github.com/EnvSync-Cloud/envsync-go-sdk/core"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
	option "github.com/EnvSync-Cloud/envsync-go-sdk/option"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *internal.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: internal.NewCaller(
			&internal.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Retrieve paginated history of environment variable changes
func (c *Client) GetEnvHistory(
	ctx context.Context,
	request *envsyncgosdk.EnvHistoryRequest,
	opts ...option.RequestOption,
) (*envsyncgosdk.EnvHistoryResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := baseURL + "/api/env/history"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.EnvHistoryResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieve environment variables state at a specific point in time
func (c *Client) GetEnvsAtPointInTime(
	ctx context.Context,
	request *envsyncgosdk.EnvPitRequest,
	opts ...option.RequestOption,
) (envsyncgosdk.EnvPitStateResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := baseURL + "/api/env/pit"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response envsyncgosdk.EnvPitStateResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Retrieve environment variables state at a specific timestamp
func (c *Client) GetEnvsAtTimestamp(
	ctx context.Context,
	request *envsyncgosdk.EnvTimestampRequest,
	opts ...option.RequestOption,
) (envsyncgosdk.EnvPitStateResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := baseURL + "/api/env/timestamp"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response envsyncgosdk.EnvPitStateResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Compare environment variables between two points in time
func (c *Client) GetEnvDiff(
	ctx context.Context,
	request *envsyncgosdk.EnvDiffRequest,
	opts ...option.RequestOption,
) (*envsyncgosdk.EnvDiffResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := baseURL + "/api/env/diff"
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response *envsyncgosdk.EnvDiffResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Get timeline of changes for a specific environment variable
func (c *Client) GetVariableTimeline(
	ctx context.Context,
	key string,
	request *envsyncgosdk.VariableTimelineRequest,
	opts ...option.RequestOption,
) (envsyncgosdk.VariableTimelineResponse, error) {
	options := core.NewRequestOptions(opts...)
	baseURL := internal.ResolveBaseURL(
		options.BaseURL,
		c.baseURL,
		"http://localhost:8600",
	)
	endpointURL := internal.EncodeURL(
		baseURL+"/api/env/timeline/%v",
		key,
	)
	headers := internal.MergeHeaders(
		c.header.Clone(),
		options.ToHeader(),
	)
	headers.Set("Content-Type", "application/json")
	errorCodes := internal.ErrorCodes{
		500: func(apiError *core.APIError) error {
			return &envsyncgosdk.InternalServerError{
				APIError: apiError,
			}
		},
	}

	var response envsyncgosdk.VariableTimelineResponse
	if err := c.caller.Call(
		ctx,
		&internal.CallParams{
			URL:             endpointURL,
			Method:          http.MethodPost,
			Headers:         headers,
			MaxAttempts:     options.MaxAttempts,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Request:         request,
			Response:        &response,
			ErrorDecoder:    internal.NewErrorDecoder(errorCodes),
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
