// Code generated by Fern. DO NOT EDIT.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/EnvSync-Cloud/envsync-go-sdk/internal"
)

type CreateEnvTypeRequest struct {
	Name        string  `json:"name" url:"-"`
	Color       *string `json:"color,omitempty" url:"-"`
	IsDefault   *bool   `json:"is_default,omitempty" url:"-"`
	IsProtected *bool   `json:"is_protected,omitempty" url:"-"`
	AppId       string  `json:"app_id" url:"-"`
}

type DeleteEnvTypeRequest struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteEnvTypeRequest) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *DeleteEnvTypeRequest) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteEnvTypeRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteEnvTypeRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteEnvTypeRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteEnvTypeRequest) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EnvTypeResponse struct {
	Id          string `json:"id" url:"id"`
	Name        string `json:"name" url:"name"`
	OrgId       string `json:"org_id" url:"org_id"`
	AppId       string `json:"app_id" url:"app_id"`
	Color       string `json:"color" url:"color"`
	IsDefault   bool   `json:"is_default" url:"is_default"`
	IsProtected bool   `json:"is_protected" url:"is_protected"`
	CreatedAt   string `json:"created_at" url:"created_at"`
	UpdatedAt   string `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EnvTypeResponse) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EnvTypeResponse) GetName() string {
	if e == nil {
		return ""
	}
	return e.Name
}

func (e *EnvTypeResponse) GetOrgId() string {
	if e == nil {
		return ""
	}
	return e.OrgId
}

func (e *EnvTypeResponse) GetAppId() string {
	if e == nil {
		return ""
	}
	return e.AppId
}

func (e *EnvTypeResponse) GetColor() string {
	if e == nil {
		return ""
	}
	return e.Color
}

func (e *EnvTypeResponse) GetIsDefault() bool {
	if e == nil {
		return false
	}
	return e.IsDefault
}

func (e *EnvTypeResponse) GetIsProtected() bool {
	if e == nil {
		return false
	}
	return e.IsProtected
}

func (e *EnvTypeResponse) GetCreatedAt() string {
	if e == nil {
		return ""
	}
	return e.CreatedAt
}

func (e *EnvTypeResponse) GetUpdatedAt() string {
	if e == nil {
		return ""
	}
	return e.UpdatedAt
}

func (e *EnvTypeResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EnvTypeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EnvTypeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EnvTypeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EnvTypeResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type EnvTypesResponse = []*EnvTypeResponse

type UpdateEnvTypeRequest struct {
	UpdateEnvTypeRequestId string  `json:"id" url:"-"`
	Name                   string  `json:"name" url:"-"`
	Color                  *string `json:"color,omitempty" url:"-"`
	IsDefault              *bool   `json:"is_default,omitempty" url:"-"`
	IsProtected            *bool   `json:"is_protected,omitempty" url:"-"`
}
